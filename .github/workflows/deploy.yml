# Build and deploy workflow
# Builds development version by default or production version if the project is 'phaenonet'

name: Deploy

on:
  workflow_dispatch:
    inputs:
      project:
        description: "Which project to target? [phaenonet/phaenonet-test]"
        required: true
        default: phaenonet-test
      tag:
        description: "Tag this deployment?"
        required: false
  push:
    branches: [ master, test-master ]

env:
  PROJECT: ${{ github.event.inputs.project || 'phaenonet-test' }}
  TAG: ${{ github.event.inputs.tag }}
  VERSION: "phaenonet-client@${{ github.event.inputs.tag && github.event.inputs.tag || github.sha }}"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master
      - name: Install Dependencies
        run: npm ci
      - name: check style
        run: npx prettier -c "."
      - name: check map icon completeness
        run: |
          diff <(ls src/assets/img/map_pins/de-CH) <(ls src/assets/img/map_pins/fr-CH) || exit
          diff <(ls src/assets/img/map_pins/de-CH) <(ls src/assets/img/map_pins/it-CH) || exit
      - name: set release version
        run: |
          echo "set release version: ${{ env.VERSION }}"
          sed -ri "s|'#VERSION#'|'${{ env.VERSION }}'|" src/environments/environment*.ts
      - name: Build
        run: npx ng build "${{ env.PROJECT == 'phaenonet' && '--c=production' || '' }}"
      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.PROJECT }}
          path: dist
  sentry:
    name: Sentry
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ env.PROJECT }}
          path: dist
      - name: Install sentry-cli
        run: npm install @sentry/cli --no-save
      - name: Perform release
        run: |
          echo "Create new release ${{ env.VERSION }}"
          npx sentry-cli releases new ${{ env.VERSION }}
          npx sentry-cli releases set-commits ${{ env.VERSION }} --auto
          npx sentry-cli releases files ${{ env.VERSION }} upload-sourcemaps ./dist -x=js -x=map -x=css -i=**/src_assets_i18n* --validate --verbose --rewrite --strip-common-prefix
          npx sentry-cli releases finalize ${{ env.VERSION }}
          echo "Finalized release ${{ env.VERSION }}"
          echo "Adding deployment for ${{ env.ENVIRONMENT }} environment"
          npx sentry-cli releases deploys ${{ env.VERSION }} new --env ${{ env.ENVIRONMENT }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: phaenonet
          SENTRY_PROJECT: phaenonet-client
          ENVIRONMENT: ${{ env.PROJECT == 'phaenonet' && 'production' || 'test' }}
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master
      - name: Checkout rules
        uses: actions/checkout@v2
        with:
          repository: globe-swiss/phaenonet-client-security
          path: security
          ssh-key: ${{ secrets.SECURITY_REPO_DEPLOY_KEY }}
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ env.PROJECT }}
          path: dist
      - name: Remove source maps (prod)
        run: rm ./dist/**/*.map
        if: ${{ env.PROJECT == 'phaenonet' }}
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --project ${{ env.PROJECT }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: ${{ env.TAG }}
        if: ${{ env.TAG }}
  docs:
    name: Update Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master
      - name: build & upload docs
        run: npx dbdocs build docs/phaenonet.dbml
        env:
          DBDOCS_TOKEN: ${{ secrets.DBDOCS_TOKEN }}
